
//===================================================
// 此文件由工具自动生成，请勿直接修改
//===================================================

using System;
using System.Collections.Generic;

namespace Emilia.Variables
{
    public static partial class VariableUtility
    {
        private static Dictionary<Type, Func<Variable>> variableCreate = new Dictionary<Type, Func<Variable>>() {
			 {typeof(System.Boolean), () => new Emilia.Variables.VariableBoolean()},
			 {typeof(System.Byte), () => new Emilia.Variables.VariableByte()},
			 {typeof(System.Byte[]), () => new Emilia.Variables.VariableByteArray()},
			 {typeof(System.Char), () => new Emilia.Variables.VariableChar()},
			 {typeof(System.Char[]), () => new Emilia.Variables.VariableCharArray()},
			 {typeof(UnityEngine.Color), () => new Emilia.Variables.VariableColor()},
			 {typeof(System.Decimal), () => new Emilia.Variables.VariableDecimal()},
			 {typeof(System.Double), () => new Emilia.Variables.VariableDouble()},
			 {typeof(UnityEngine.GameObject), () => new Emilia.Variables.VariableGameObject()},
			 {typeof(System.Int16), () => new Emilia.Variables.VariableInt16()},
			 {typeof(System.Int32), () => new Emilia.Variables.VariableInt32()},
			 {typeof(System.Collections.Generic.List<System.Int32>), () => new Emilia.Variables.VariableInt32List()},
			 {typeof(System.Int64), () => new Emilia.Variables.VariableInt64()},
			 {typeof(System.Collections.Generic.List<System.Int64>), () => new Emilia.Variables.VariableInt64List()},
			 {typeof(System.Object), () => new Emilia.Variables.VariableObject()},
			 {typeof(UnityEngine.Quaternion), () => new Emilia.Variables.VariableQuaternion()},
			 {typeof(UnityEngine.Rect), () => new Emilia.Variables.VariableRect()},
			 {typeof(System.SByte), () => new Emilia.Variables.VariableSByte()},
			 {typeof(System.Single), () => new Emilia.Variables.VariableSingle()},
			 {typeof(System.String), () => new Emilia.Variables.VariableString()},
			 {typeof(UnityEngine.Transform), () => new Emilia.Variables.VariableTransform()},
			 {typeof(System.UInt16), () => new Emilia.Variables.VariableUInt16()},
			 {typeof(System.UInt32), () => new Emilia.Variables.VariableUInt32()},
			 {typeof(System.UInt64), () => new Emilia.Variables.VariableUInt64()},
			 {typeof(UnityEngine.Object), () => new Emilia.Variables.VariableUnityObject()},
			 {typeof(UnityEngine.Vector2), () => new Emilia.Variables.VariableVector2()},
			 {typeof(UnityEngine.Vector3), () => new Emilia.Variables.VariableVector3()},
			 {typeof(UnityEngine.Vector4), () => new Emilia.Variables.VariableVector4()},

        };
        
        private static Dictionary<Type, Func<Variable>> variableCreateFromPool = new Dictionary<Type, Func<Variable>>() {
			 {typeof(System.Boolean), () => Emilia.Reference.ReferencePool.Acquire<Emilia.Variables.VariableBoolean>()},
			 {typeof(System.Byte), () => Emilia.Reference.ReferencePool.Acquire<Emilia.Variables.VariableByte>()},
			 {typeof(System.Byte[]), () => Emilia.Reference.ReferencePool.Acquire<Emilia.Variables.VariableByteArray>()},
			 {typeof(System.Char), () => Emilia.Reference.ReferencePool.Acquire<Emilia.Variables.VariableChar>()},
			 {typeof(System.Char[]), () => Emilia.Reference.ReferencePool.Acquire<Emilia.Variables.VariableCharArray>()},
			 {typeof(UnityEngine.Color), () => Emilia.Reference.ReferencePool.Acquire<Emilia.Variables.VariableColor>()},
			 {typeof(System.Decimal), () => Emilia.Reference.ReferencePool.Acquire<Emilia.Variables.VariableDecimal>()},
			 {typeof(System.Double), () => Emilia.Reference.ReferencePool.Acquire<Emilia.Variables.VariableDouble>()},
			 {typeof(UnityEngine.GameObject), () => Emilia.Reference.ReferencePool.Acquire<Emilia.Variables.VariableGameObject>()},
			 {typeof(System.Int16), () => Emilia.Reference.ReferencePool.Acquire<Emilia.Variables.VariableInt16>()},
			 {typeof(System.Int32), () => Emilia.Reference.ReferencePool.Acquire<Emilia.Variables.VariableInt32>()},
			 {typeof(System.Collections.Generic.List<System.Int32>), () => Emilia.Reference.ReferencePool.Acquire<Emilia.Variables.VariableInt32List>()},
			 {typeof(System.Int64), () => Emilia.Reference.ReferencePool.Acquire<Emilia.Variables.VariableInt64>()},
			 {typeof(System.Collections.Generic.List<System.Int64>), () => Emilia.Reference.ReferencePool.Acquire<Emilia.Variables.VariableInt64List>()},
			 {typeof(System.Object), () => Emilia.Reference.ReferencePool.Acquire<Emilia.Variables.VariableObject>()},
			 {typeof(UnityEngine.Quaternion), () => Emilia.Reference.ReferencePool.Acquire<Emilia.Variables.VariableQuaternion>()},
			 {typeof(UnityEngine.Rect), () => Emilia.Reference.ReferencePool.Acquire<Emilia.Variables.VariableRect>()},
			 {typeof(System.SByte), () => Emilia.Reference.ReferencePool.Acquire<Emilia.Variables.VariableSByte>()},
			 {typeof(System.Single), () => Emilia.Reference.ReferencePool.Acquire<Emilia.Variables.VariableSingle>()},
			 {typeof(System.String), () => Emilia.Reference.ReferencePool.Acquire<Emilia.Variables.VariableString>()},
			 {typeof(UnityEngine.Transform), () => Emilia.Reference.ReferencePool.Acquire<Emilia.Variables.VariableTransform>()},
			 {typeof(System.UInt16), () => Emilia.Reference.ReferencePool.Acquire<Emilia.Variables.VariableUInt16>()},
			 {typeof(System.UInt32), () => Emilia.Reference.ReferencePool.Acquire<Emilia.Variables.VariableUInt32>()},
			 {typeof(System.UInt64), () => Emilia.Reference.ReferencePool.Acquire<Emilia.Variables.VariableUInt64>()},
			 {typeof(UnityEngine.Object), () => Emilia.Reference.ReferencePool.Acquire<Emilia.Variables.VariableUnityObject>()},
			 {typeof(UnityEngine.Vector2), () => Emilia.Reference.ReferencePool.Acquire<Emilia.Variables.VariableVector2>()},
			 {typeof(UnityEngine.Vector3), () => Emilia.Reference.ReferencePool.Acquire<Emilia.Variables.VariableVector3>()},
			 {typeof(UnityEngine.Vector4), () => Emilia.Reference.ReferencePool.Acquire<Emilia.Variables.VariableVector4>()},

        };

        private static Dictionary<ConvertMatching, Func<Variable, Variable>> variableConvert = new Dictionary<ConvertMatching, Func<Variable, Variable>>() {
			 {new ConvertMatching(typeof(Emilia.Variables.VariableString), typeof(Emilia.Variables.VariableBoolean)), variable => (Emilia.Variables.VariableBoolean) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableSByte), typeof(Emilia.Variables.VariableBoolean)), variable => (Emilia.Variables.VariableBoolean) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableUInt16), typeof(Emilia.Variables.VariableBoolean)), variable => (Emilia.Variables.VariableBoolean) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableUInt32), typeof(Emilia.Variables.VariableBoolean)), variable => (Emilia.Variables.VariableBoolean) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableUInt64), typeof(Emilia.Variables.VariableBoolean)), variable => (Emilia.Variables.VariableBoolean) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableByte), typeof(Emilia.Variables.VariableBoolean)), variable => (Emilia.Variables.VariableBoolean) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableInt16), typeof(Emilia.Variables.VariableBoolean)), variable => (Emilia.Variables.VariableBoolean) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableInt32), typeof(Emilia.Variables.VariableBoolean)), variable => (Emilia.Variables.VariableBoolean) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableInt64), typeof(Emilia.Variables.VariableBoolean)), variable => (Emilia.Variables.VariableBoolean) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableSingle), typeof(Emilia.Variables.VariableBoolean)), variable => (Emilia.Variables.VariableBoolean) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableDouble), typeof(Emilia.Variables.VariableBoolean)), variable => (Emilia.Variables.VariableBoolean) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableDecimal), typeof(Emilia.Variables.VariableBoolean)), variable => (Emilia.Variables.VariableBoolean) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableString), typeof(Emilia.Variables.VariableByte)), variable => (Emilia.Variables.VariableByte) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableUInt16), typeof(Emilia.Variables.VariableByte)), variable => (Emilia.Variables.VariableByte) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableUInt32), typeof(Emilia.Variables.VariableByte)), variable => (Emilia.Variables.VariableByte) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableUInt64), typeof(Emilia.Variables.VariableByte)), variable => (Emilia.Variables.VariableByte) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableSByte), typeof(Emilia.Variables.VariableByte)), variable => (Emilia.Variables.VariableByte) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableInt16), typeof(Emilia.Variables.VariableByte)), variable => (Emilia.Variables.VariableByte) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableInt32), typeof(Emilia.Variables.VariableByte)), variable => (Emilia.Variables.VariableByte) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableInt64), typeof(Emilia.Variables.VariableByte)), variable => (Emilia.Variables.VariableByte) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableSingle), typeof(Emilia.Variables.VariableByte)), variable => (Emilia.Variables.VariableByte) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableDouble), typeof(Emilia.Variables.VariableByte)), variable => (Emilia.Variables.VariableByte) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableDecimal), typeof(Emilia.Variables.VariableByte)), variable => (Emilia.Variables.VariableByte) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableString), typeof(Emilia.Variables.VariableChar)), variable => (Emilia.Variables.VariableChar) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableString), typeof(Emilia.Variables.VariableDecimal)), variable => (Emilia.Variables.VariableDecimal) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableSByte), typeof(Emilia.Variables.VariableDecimal)), variable => (Emilia.Variables.VariableDecimal) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableUInt16), typeof(Emilia.Variables.VariableDecimal)), variable => (Emilia.Variables.VariableDecimal) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableUInt32), typeof(Emilia.Variables.VariableDecimal)), variable => (Emilia.Variables.VariableDecimal) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableUInt64), typeof(Emilia.Variables.VariableDecimal)), variable => (Emilia.Variables.VariableDecimal) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableByte), typeof(Emilia.Variables.VariableDecimal)), variable => (Emilia.Variables.VariableDecimal) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableInt16), typeof(Emilia.Variables.VariableDecimal)), variable => (Emilia.Variables.VariableDecimal) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableInt32), typeof(Emilia.Variables.VariableDecimal)), variable => (Emilia.Variables.VariableDecimal) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableInt64), typeof(Emilia.Variables.VariableDecimal)), variable => (Emilia.Variables.VariableDecimal) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableSingle), typeof(Emilia.Variables.VariableDecimal)), variable => (Emilia.Variables.VariableDecimal) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableDouble), typeof(Emilia.Variables.VariableDecimal)), variable => (Emilia.Variables.VariableDecimal) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableString), typeof(Emilia.Variables.VariableDouble)), variable => (Emilia.Variables.VariableDouble) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableSByte), typeof(Emilia.Variables.VariableDouble)), variable => (Emilia.Variables.VariableDouble) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableUInt16), typeof(Emilia.Variables.VariableDouble)), variable => (Emilia.Variables.VariableDouble) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableUInt32), typeof(Emilia.Variables.VariableDouble)), variable => (Emilia.Variables.VariableDouble) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableUInt64), typeof(Emilia.Variables.VariableDouble)), variable => (Emilia.Variables.VariableDouble) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableByte), typeof(Emilia.Variables.VariableDouble)), variable => (Emilia.Variables.VariableDouble) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableInt16), typeof(Emilia.Variables.VariableDouble)), variable => (Emilia.Variables.VariableDouble) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableInt32), typeof(Emilia.Variables.VariableDouble)), variable => (Emilia.Variables.VariableDouble) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableInt64), typeof(Emilia.Variables.VariableDouble)), variable => (Emilia.Variables.VariableDouble) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableSingle), typeof(Emilia.Variables.VariableDouble)), variable => (Emilia.Variables.VariableDouble) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableDecimal), typeof(Emilia.Variables.VariableDouble)), variable => (Emilia.Variables.VariableDouble) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableString), typeof(Emilia.Variables.VariableInt16)), variable => (Emilia.Variables.VariableInt16) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableSByte), typeof(Emilia.Variables.VariableInt16)), variable => (Emilia.Variables.VariableInt16) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableUInt16), typeof(Emilia.Variables.VariableInt16)), variable => (Emilia.Variables.VariableInt16) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableUInt32), typeof(Emilia.Variables.VariableInt16)), variable => (Emilia.Variables.VariableInt16) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableUInt64), typeof(Emilia.Variables.VariableInt16)), variable => (Emilia.Variables.VariableInt16) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableByte), typeof(Emilia.Variables.VariableInt16)), variable => (Emilia.Variables.VariableInt16) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableInt32), typeof(Emilia.Variables.VariableInt16)), variable => (Emilia.Variables.VariableInt16) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableInt64), typeof(Emilia.Variables.VariableInt16)), variable => (Emilia.Variables.VariableInt16) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableSingle), typeof(Emilia.Variables.VariableInt16)), variable => (Emilia.Variables.VariableInt16) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableDouble), typeof(Emilia.Variables.VariableInt16)), variable => (Emilia.Variables.VariableInt16) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableDecimal), typeof(Emilia.Variables.VariableInt16)), variable => (Emilia.Variables.VariableInt16) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableString), typeof(Emilia.Variables.VariableInt32)), variable => (Emilia.Variables.VariableInt32) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableSByte), typeof(Emilia.Variables.VariableInt32)), variable => (Emilia.Variables.VariableInt32) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableUInt16), typeof(Emilia.Variables.VariableInt32)), variable => (Emilia.Variables.VariableInt32) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableUInt32), typeof(Emilia.Variables.VariableInt32)), variable => (Emilia.Variables.VariableInt32) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableUInt64), typeof(Emilia.Variables.VariableInt32)), variable => (Emilia.Variables.VariableInt32) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableByte), typeof(Emilia.Variables.VariableInt32)), variable => (Emilia.Variables.VariableInt32) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableInt16), typeof(Emilia.Variables.VariableInt32)), variable => (Emilia.Variables.VariableInt32) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableInt64), typeof(Emilia.Variables.VariableInt32)), variable => (Emilia.Variables.VariableInt32) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableSingle), typeof(Emilia.Variables.VariableInt32)), variable => (Emilia.Variables.VariableInt32) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableDouble), typeof(Emilia.Variables.VariableInt32)), variable => (Emilia.Variables.VariableInt32) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableDecimal), typeof(Emilia.Variables.VariableInt32)), variable => (Emilia.Variables.VariableInt32) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableString), typeof(Emilia.Variables.VariableInt64)), variable => (Emilia.Variables.VariableInt64) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableByte), typeof(Emilia.Variables.VariableInt64)), variable => (Emilia.Variables.VariableInt64) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableInt16), typeof(Emilia.Variables.VariableInt64)), variable => (Emilia.Variables.VariableInt64) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableInt32), typeof(Emilia.Variables.VariableInt64)), variable => (Emilia.Variables.VariableInt64) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableSingle), typeof(Emilia.Variables.VariableInt64)), variable => (Emilia.Variables.VariableInt64) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableDouble), typeof(Emilia.Variables.VariableInt64)), variable => (Emilia.Variables.VariableInt64) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableDecimal), typeof(Emilia.Variables.VariableInt64)), variable => (Emilia.Variables.VariableInt64) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableString), typeof(Emilia.Variables.VariableSByte)), variable => (Emilia.Variables.VariableSByte) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableUInt16), typeof(Emilia.Variables.VariableSByte)), variable => (Emilia.Variables.VariableSByte) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableUInt32), typeof(Emilia.Variables.VariableSByte)), variable => (Emilia.Variables.VariableSByte) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableUInt64), typeof(Emilia.Variables.VariableSByte)), variable => (Emilia.Variables.VariableSByte) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableByte), typeof(Emilia.Variables.VariableSByte)), variable => (Emilia.Variables.VariableSByte) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableInt16), typeof(Emilia.Variables.VariableSByte)), variable => (Emilia.Variables.VariableSByte) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableInt32), typeof(Emilia.Variables.VariableSByte)), variable => (Emilia.Variables.VariableSByte) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableInt64), typeof(Emilia.Variables.VariableSByte)), variable => (Emilia.Variables.VariableSByte) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableSingle), typeof(Emilia.Variables.VariableSByte)), variable => (Emilia.Variables.VariableSByte) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableDouble), typeof(Emilia.Variables.VariableSByte)), variable => (Emilia.Variables.VariableSByte) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableDecimal), typeof(Emilia.Variables.VariableSByte)), variable => (Emilia.Variables.VariableSByte) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableString), typeof(Emilia.Variables.VariableSingle)), variable => (Emilia.Variables.VariableSingle) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableSByte), typeof(Emilia.Variables.VariableSingle)), variable => (Emilia.Variables.VariableSingle) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableUInt16), typeof(Emilia.Variables.VariableSingle)), variable => (Emilia.Variables.VariableSingle) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableUInt32), typeof(Emilia.Variables.VariableSingle)), variable => (Emilia.Variables.VariableSingle) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableUInt64), typeof(Emilia.Variables.VariableSingle)), variable => (Emilia.Variables.VariableSingle) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableByte), typeof(Emilia.Variables.VariableSingle)), variable => (Emilia.Variables.VariableSingle) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableInt16), typeof(Emilia.Variables.VariableSingle)), variable => (Emilia.Variables.VariableSingle) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableInt32), typeof(Emilia.Variables.VariableSingle)), variable => (Emilia.Variables.VariableSingle) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableInt64), typeof(Emilia.Variables.VariableSingle)), variable => (Emilia.Variables.VariableSingle) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableDouble), typeof(Emilia.Variables.VariableSingle)), variable => (Emilia.Variables.VariableSingle) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableDecimal), typeof(Emilia.Variables.VariableSingle)), variable => (Emilia.Variables.VariableSingle) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableChar), typeof(Emilia.Variables.VariableString)), variable => (Emilia.Variables.VariableString) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableSByte), typeof(Emilia.Variables.VariableString)), variable => (Emilia.Variables.VariableString) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableUInt16), typeof(Emilia.Variables.VariableString)), variable => (Emilia.Variables.VariableString) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableUInt32), typeof(Emilia.Variables.VariableString)), variable => (Emilia.Variables.VariableString) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableUInt64), typeof(Emilia.Variables.VariableString)), variable => (Emilia.Variables.VariableString) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableByte), typeof(Emilia.Variables.VariableString)), variable => (Emilia.Variables.VariableString) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableInt32), typeof(Emilia.Variables.VariableString)), variable => (Emilia.Variables.VariableString) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableInt64), typeof(Emilia.Variables.VariableString)), variable => (Emilia.Variables.VariableString) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableSingle), typeof(Emilia.Variables.VariableString)), variable => (Emilia.Variables.VariableString) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableDouble), typeof(Emilia.Variables.VariableString)), variable => (Emilia.Variables.VariableString) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableDecimal), typeof(Emilia.Variables.VariableString)), variable => (Emilia.Variables.VariableString) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableString), typeof(Emilia.Variables.VariableUInt16)), variable => (Emilia.Variables.VariableUInt16) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableSByte), typeof(Emilia.Variables.VariableUInt16)), variable => (Emilia.Variables.VariableUInt16) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableUInt32), typeof(Emilia.Variables.VariableUInt16)), variable => (Emilia.Variables.VariableUInt16) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableUInt64), typeof(Emilia.Variables.VariableUInt16)), variable => (Emilia.Variables.VariableUInt16) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableByte), typeof(Emilia.Variables.VariableUInt16)), variable => (Emilia.Variables.VariableUInt16) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableInt16), typeof(Emilia.Variables.VariableUInt16)), variable => (Emilia.Variables.VariableUInt16) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableInt32), typeof(Emilia.Variables.VariableUInt16)), variable => (Emilia.Variables.VariableUInt16) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableInt64), typeof(Emilia.Variables.VariableUInt16)), variable => (Emilia.Variables.VariableUInt16) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableSingle), typeof(Emilia.Variables.VariableUInt16)), variable => (Emilia.Variables.VariableUInt16) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableDouble), typeof(Emilia.Variables.VariableUInt16)), variable => (Emilia.Variables.VariableUInt16) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableDecimal), typeof(Emilia.Variables.VariableUInt16)), variable => (Emilia.Variables.VariableUInt16) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableString), typeof(Emilia.Variables.VariableUInt32)), variable => (Emilia.Variables.VariableUInt32) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableSByte), typeof(Emilia.Variables.VariableUInt32)), variable => (Emilia.Variables.VariableUInt32) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableUInt16), typeof(Emilia.Variables.VariableUInt32)), variable => (Emilia.Variables.VariableUInt32) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableUInt64), typeof(Emilia.Variables.VariableUInt32)), variable => (Emilia.Variables.VariableUInt32) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableByte), typeof(Emilia.Variables.VariableUInt32)), variable => (Emilia.Variables.VariableUInt32) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableInt16), typeof(Emilia.Variables.VariableUInt32)), variable => (Emilia.Variables.VariableUInt32) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableInt32), typeof(Emilia.Variables.VariableUInt32)), variable => (Emilia.Variables.VariableUInt32) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableInt64), typeof(Emilia.Variables.VariableUInt32)), variable => (Emilia.Variables.VariableUInt32) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableSingle), typeof(Emilia.Variables.VariableUInt32)), variable => (Emilia.Variables.VariableUInt32) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableDouble), typeof(Emilia.Variables.VariableUInt32)), variable => (Emilia.Variables.VariableUInt32) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableDecimal), typeof(Emilia.Variables.VariableUInt32)), variable => (Emilia.Variables.VariableUInt32) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableString), typeof(Emilia.Variables.VariableUInt64)), variable => (Emilia.Variables.VariableUInt64) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableSByte), typeof(Emilia.Variables.VariableUInt64)), variable => (Emilia.Variables.VariableUInt64) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableUInt16), typeof(Emilia.Variables.VariableUInt64)), variable => (Emilia.Variables.VariableUInt64) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableUInt32), typeof(Emilia.Variables.VariableUInt64)), variable => (Emilia.Variables.VariableUInt64) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableByte), typeof(Emilia.Variables.VariableUInt64)), variable => (Emilia.Variables.VariableUInt64) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableInt16), typeof(Emilia.Variables.VariableUInt64)), variable => (Emilia.Variables.VariableUInt64) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableInt32), typeof(Emilia.Variables.VariableUInt64)), variable => (Emilia.Variables.VariableUInt64) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableInt64), typeof(Emilia.Variables.VariableUInt64)), variable => (Emilia.Variables.VariableUInt64) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableSingle), typeof(Emilia.Variables.VariableUInt64)), variable => (Emilia.Variables.VariableUInt64) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableDouble), typeof(Emilia.Variables.VariableUInt64)), variable => (Emilia.Variables.VariableUInt64) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableDecimal), typeof(Emilia.Variables.VariableUInt64)), variable => (Emilia.Variables.VariableUInt64) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableVector2), typeof(Emilia.Variables.VariableVector3)), variable => (Emilia.Variables.VariableVector3) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableVector2), typeof(Emilia.Variables.VariableVector4)), variable => (Emilia.Variables.VariableVector4) variable},
			 {new ConvertMatching(typeof(Emilia.Variables.VariableVector3), typeof(Emilia.Variables.VariableVector4)), variable => (Emilia.Variables.VariableVector4) variable},

        };

        private static Dictionary<Type, Func<Variable, Variable, bool>> variableEqual = new Dictionary<Type, Func<Variable, Variable, bool>>() {
			 {typeof(Emilia.Variables.VariableBoolean), (left, right) => (Emilia.Variables.VariableBoolean) left == (Emilia.Variables.VariableBoolean) right},
			 {typeof(Emilia.Variables.VariableByte), (left, right) => (Emilia.Variables.VariableByte) left == (Emilia.Variables.VariableByte) right},
			 {typeof(Emilia.Variables.VariableChar), (left, right) => (Emilia.Variables.VariableChar) left == (Emilia.Variables.VariableChar) right},
			 {typeof(Emilia.Variables.VariableColor), (left, right) => (Emilia.Variables.VariableColor) left == (Emilia.Variables.VariableColor) right},
			 {typeof(Emilia.Variables.VariableDecimal), (left, right) => (Emilia.Variables.VariableDecimal) left == (Emilia.Variables.VariableDecimal) right},
			 {typeof(Emilia.Variables.VariableDouble), (left, right) => (Emilia.Variables.VariableDouble) left == (Emilia.Variables.VariableDouble) right},
			 {typeof(Emilia.Variables.VariableGameObject), (left, right) => (Emilia.Variables.VariableGameObject) left == (Emilia.Variables.VariableGameObject) right},
			 {typeof(Emilia.Variables.VariableInt16), (left, right) => (Emilia.Variables.VariableInt16) left == (Emilia.Variables.VariableInt16) right},
			 {typeof(Emilia.Variables.VariableInt32), (left, right) => (Emilia.Variables.VariableInt32) left == (Emilia.Variables.VariableInt32) right},
			 {typeof(Emilia.Variables.VariableInt64), (left, right) => (Emilia.Variables.VariableInt64) left == (Emilia.Variables.VariableInt64) right},
			 {typeof(Emilia.Variables.VariableObject), (left, right) => (Emilia.Variables.VariableObject) left == (Emilia.Variables.VariableObject) right},
			 {typeof(Emilia.Variables.VariableQuaternion), (left, right) => (Emilia.Variables.VariableQuaternion) left == (Emilia.Variables.VariableQuaternion) right},
			 {typeof(Emilia.Variables.VariableRect), (left, right) => (Emilia.Variables.VariableRect) left == (Emilia.Variables.VariableRect) right},
			 {typeof(Emilia.Variables.VariableSByte), (left, right) => (Emilia.Variables.VariableSByte) left == (Emilia.Variables.VariableSByte) right},
			 {typeof(Emilia.Variables.VariableSingle), (left, right) => (Emilia.Variables.VariableSingle) left == (Emilia.Variables.VariableSingle) right},
			 {typeof(Emilia.Variables.VariableString), (left, right) => (Emilia.Variables.VariableString) left == (Emilia.Variables.VariableString) right},
			 {typeof(Emilia.Variables.VariableTransform), (left, right) => (Emilia.Variables.VariableTransform) left == (Emilia.Variables.VariableTransform) right},
			 {typeof(Emilia.Variables.VariableUInt16), (left, right) => (Emilia.Variables.VariableUInt16) left == (Emilia.Variables.VariableUInt16) right},
			 {typeof(Emilia.Variables.VariableUInt32), (left, right) => (Emilia.Variables.VariableUInt32) left == (Emilia.Variables.VariableUInt32) right},
			 {typeof(Emilia.Variables.VariableUInt64), (left, right) => (Emilia.Variables.VariableUInt64) left == (Emilia.Variables.VariableUInt64) right},
			 {typeof(Emilia.Variables.VariableUnityObject), (left, right) => (Emilia.Variables.VariableUnityObject) left == (Emilia.Variables.VariableUnityObject) right},
			 {typeof(Emilia.Variables.VariableVector2), (left, right) => (Emilia.Variables.VariableVector2) left == (Emilia.Variables.VariableVector2) right},
			 {typeof(Emilia.Variables.VariableVector3), (left, right) => (Emilia.Variables.VariableVector3) left == (Emilia.Variables.VariableVector3) right},
			 {typeof(Emilia.Variables.VariableVector4), (left, right) => (Emilia.Variables.VariableVector4) left == (Emilia.Variables.VariableVector4) right},

        };
        
        private static Dictionary<Type, Func<Variable, Variable, bool>> variableNotEqual = new Dictionary<Type, Func<Variable, Variable, bool>>() {
			 {typeof(Emilia.Variables.VariableBoolean), (left, right) => (Emilia.Variables.VariableBoolean) left != (Emilia.Variables.VariableBoolean) right},
			 {typeof(Emilia.Variables.VariableByte), (left, right) => (Emilia.Variables.VariableByte) left != (Emilia.Variables.VariableByte) right},
			 {typeof(Emilia.Variables.VariableChar), (left, right) => (Emilia.Variables.VariableChar) left != (Emilia.Variables.VariableChar) right},
			 {typeof(Emilia.Variables.VariableColor), (left, right) => (Emilia.Variables.VariableColor) left != (Emilia.Variables.VariableColor) right},
			 {typeof(Emilia.Variables.VariableDecimal), (left, right) => (Emilia.Variables.VariableDecimal) left != (Emilia.Variables.VariableDecimal) right},
			 {typeof(Emilia.Variables.VariableDouble), (left, right) => (Emilia.Variables.VariableDouble) left != (Emilia.Variables.VariableDouble) right},
			 {typeof(Emilia.Variables.VariableGameObject), (left, right) => (Emilia.Variables.VariableGameObject) left != (Emilia.Variables.VariableGameObject) right},
			 {typeof(Emilia.Variables.VariableInt16), (left, right) => (Emilia.Variables.VariableInt16) left != (Emilia.Variables.VariableInt16) right},
			 {typeof(Emilia.Variables.VariableInt32), (left, right) => (Emilia.Variables.VariableInt32) left != (Emilia.Variables.VariableInt32) right},
			 {typeof(Emilia.Variables.VariableInt64), (left, right) => (Emilia.Variables.VariableInt64) left != (Emilia.Variables.VariableInt64) right},
			 {typeof(Emilia.Variables.VariableObject), (left, right) => (Emilia.Variables.VariableObject) left != (Emilia.Variables.VariableObject) right},
			 {typeof(Emilia.Variables.VariableQuaternion), (left, right) => (Emilia.Variables.VariableQuaternion) left != (Emilia.Variables.VariableQuaternion) right},
			 {typeof(Emilia.Variables.VariableRect), (left, right) => (Emilia.Variables.VariableRect) left != (Emilia.Variables.VariableRect) right},
			 {typeof(Emilia.Variables.VariableSByte), (left, right) => (Emilia.Variables.VariableSByte) left != (Emilia.Variables.VariableSByte) right},
			 {typeof(Emilia.Variables.VariableSingle), (left, right) => (Emilia.Variables.VariableSingle) left != (Emilia.Variables.VariableSingle) right},
			 {typeof(Emilia.Variables.VariableString), (left, right) => (Emilia.Variables.VariableString) left != (Emilia.Variables.VariableString) right},
			 {typeof(Emilia.Variables.VariableTransform), (left, right) => (Emilia.Variables.VariableTransform) left != (Emilia.Variables.VariableTransform) right},
			 {typeof(Emilia.Variables.VariableUInt16), (left, right) => (Emilia.Variables.VariableUInt16) left != (Emilia.Variables.VariableUInt16) right},
			 {typeof(Emilia.Variables.VariableUInt32), (left, right) => (Emilia.Variables.VariableUInt32) left != (Emilia.Variables.VariableUInt32) right},
			 {typeof(Emilia.Variables.VariableUInt64), (left, right) => (Emilia.Variables.VariableUInt64) left != (Emilia.Variables.VariableUInt64) right},
			 {typeof(Emilia.Variables.VariableUnityObject), (left, right) => (Emilia.Variables.VariableUnityObject) left != (Emilia.Variables.VariableUnityObject) right},
			 {typeof(Emilia.Variables.VariableVector2), (left, right) => (Emilia.Variables.VariableVector2) left != (Emilia.Variables.VariableVector2) right},
			 {typeof(Emilia.Variables.VariableVector3), (left, right) => (Emilia.Variables.VariableVector3) left != (Emilia.Variables.VariableVector3) right},
			 {typeof(Emilia.Variables.VariableVector4), (left, right) => (Emilia.Variables.VariableVector4) left != (Emilia.Variables.VariableVector4) right},
    
        };
        
        private static Dictionary<Type, Func<Variable, Variable, bool>> variableGreaterOrEqual = new Dictionary<Type, Func<Variable, Variable, bool>>() {
			 {typeof(Emilia.Variables.VariableByte), (left, right) => (Emilia.Variables.VariableByte) left >= (Emilia.Variables.VariableByte) right},
			 {typeof(Emilia.Variables.VariableChar), (left, right) => (Emilia.Variables.VariableChar) left >= (Emilia.Variables.VariableChar) right},
			 {typeof(Emilia.Variables.VariableDecimal), (left, right) => (Emilia.Variables.VariableDecimal) left >= (Emilia.Variables.VariableDecimal) right},
			 {typeof(Emilia.Variables.VariableDouble), (left, right) => (Emilia.Variables.VariableDouble) left >= (Emilia.Variables.VariableDouble) right},
			 {typeof(Emilia.Variables.VariableInt16), (left, right) => (Emilia.Variables.VariableInt16) left >= (Emilia.Variables.VariableInt16) right},
			 {typeof(Emilia.Variables.VariableInt32), (left, right) => (Emilia.Variables.VariableInt32) left >= (Emilia.Variables.VariableInt32) right},
			 {typeof(Emilia.Variables.VariableInt64), (left, right) => (Emilia.Variables.VariableInt64) left >= (Emilia.Variables.VariableInt64) right},
			 {typeof(Emilia.Variables.VariableSByte), (left, right) => (Emilia.Variables.VariableSByte) left >= (Emilia.Variables.VariableSByte) right},
			 {typeof(Emilia.Variables.VariableSingle), (left, right) => (Emilia.Variables.VariableSingle) left >= (Emilia.Variables.VariableSingle) right},
			 {typeof(Emilia.Variables.VariableUInt16), (left, right) => (Emilia.Variables.VariableUInt16) left >= (Emilia.Variables.VariableUInt16) right},
			 {typeof(Emilia.Variables.VariableUInt32), (left, right) => (Emilia.Variables.VariableUInt32) left >= (Emilia.Variables.VariableUInt32) right},
			 {typeof(Emilia.Variables.VariableUInt64), (left, right) => (Emilia.Variables.VariableUInt64) left >= (Emilia.Variables.VariableUInt64) right},

        };
        
        private static Dictionary<Type, Func<Variable, Variable, bool>> variableGreater = new Dictionary<Type, Func<Variable, Variable, bool>>() {
			 {typeof(Emilia.Variables.VariableByte), (left, right) => (Emilia.Variables.VariableByte) left > (Emilia.Variables.VariableByte) right},
			 {typeof(Emilia.Variables.VariableChar), (left, right) => (Emilia.Variables.VariableChar) left > (Emilia.Variables.VariableChar) right},
			 {typeof(Emilia.Variables.VariableDecimal), (left, right) => (Emilia.Variables.VariableDecimal) left > (Emilia.Variables.VariableDecimal) right},
			 {typeof(Emilia.Variables.VariableDouble), (left, right) => (Emilia.Variables.VariableDouble) left > (Emilia.Variables.VariableDouble) right},
			 {typeof(Emilia.Variables.VariableInt16), (left, right) => (Emilia.Variables.VariableInt16) left > (Emilia.Variables.VariableInt16) right},
			 {typeof(Emilia.Variables.VariableInt32), (left, right) => (Emilia.Variables.VariableInt32) left > (Emilia.Variables.VariableInt32) right},
			 {typeof(Emilia.Variables.VariableInt64), (left, right) => (Emilia.Variables.VariableInt64) left > (Emilia.Variables.VariableInt64) right},
			 {typeof(Emilia.Variables.VariableSByte), (left, right) => (Emilia.Variables.VariableSByte) left > (Emilia.Variables.VariableSByte) right},
			 {typeof(Emilia.Variables.VariableSingle), (left, right) => (Emilia.Variables.VariableSingle) left > (Emilia.Variables.VariableSingle) right},
			 {typeof(Emilia.Variables.VariableUInt16), (left, right) => (Emilia.Variables.VariableUInt16) left > (Emilia.Variables.VariableUInt16) right},
			 {typeof(Emilia.Variables.VariableUInt32), (left, right) => (Emilia.Variables.VariableUInt32) left > (Emilia.Variables.VariableUInt32) right},
			 {typeof(Emilia.Variables.VariableUInt64), (left, right) => (Emilia.Variables.VariableUInt64) left > (Emilia.Variables.VariableUInt64) right},

        };
       
        private static Dictionary<Type, Func<Variable, Variable, bool>> variableSmallerOrEqual = new Dictionary<Type, Func<Variable, Variable, bool>>() {
			 {typeof(Emilia.Variables.VariableByte), (left, right) => (Emilia.Variables.VariableByte) left <= (Emilia.Variables.VariableByte) right},
			 {typeof(Emilia.Variables.VariableChar), (left, right) => (Emilia.Variables.VariableChar) left <= (Emilia.Variables.VariableChar) right},
			 {typeof(Emilia.Variables.VariableDecimal), (left, right) => (Emilia.Variables.VariableDecimal) left <= (Emilia.Variables.VariableDecimal) right},
			 {typeof(Emilia.Variables.VariableDouble), (left, right) => (Emilia.Variables.VariableDouble) left <= (Emilia.Variables.VariableDouble) right},
			 {typeof(Emilia.Variables.VariableInt16), (left, right) => (Emilia.Variables.VariableInt16) left <= (Emilia.Variables.VariableInt16) right},
			 {typeof(Emilia.Variables.VariableInt32), (left, right) => (Emilia.Variables.VariableInt32) left <= (Emilia.Variables.VariableInt32) right},
			 {typeof(Emilia.Variables.VariableInt64), (left, right) => (Emilia.Variables.VariableInt64) left <= (Emilia.Variables.VariableInt64) right},
			 {typeof(Emilia.Variables.VariableSByte), (left, right) => (Emilia.Variables.VariableSByte) left <= (Emilia.Variables.VariableSByte) right},
			 {typeof(Emilia.Variables.VariableSingle), (left, right) => (Emilia.Variables.VariableSingle) left <= (Emilia.Variables.VariableSingle) right},
			 {typeof(Emilia.Variables.VariableUInt16), (left, right) => (Emilia.Variables.VariableUInt16) left <= (Emilia.Variables.VariableUInt16) right},
			 {typeof(Emilia.Variables.VariableUInt32), (left, right) => (Emilia.Variables.VariableUInt32) left <= (Emilia.Variables.VariableUInt32) right},
			 {typeof(Emilia.Variables.VariableUInt64), (left, right) => (Emilia.Variables.VariableUInt64) left <= (Emilia.Variables.VariableUInt64) right},

        };
        
        private static Dictionary<Type, Func<Variable, Variable, bool>> variableSmaller = new Dictionary<Type, Func<Variable, Variable, bool>>() {
			 {typeof(Emilia.Variables.VariableByte), (left, right) => (Emilia.Variables.VariableByte) left < (Emilia.Variables.VariableByte) right},
			 {typeof(Emilia.Variables.VariableChar), (left, right) => (Emilia.Variables.VariableChar) left < (Emilia.Variables.VariableChar) right},
			 {typeof(Emilia.Variables.VariableDecimal), (left, right) => (Emilia.Variables.VariableDecimal) left < (Emilia.Variables.VariableDecimal) right},
			 {typeof(Emilia.Variables.VariableDouble), (left, right) => (Emilia.Variables.VariableDouble) left < (Emilia.Variables.VariableDouble) right},
			 {typeof(Emilia.Variables.VariableInt16), (left, right) => (Emilia.Variables.VariableInt16) left < (Emilia.Variables.VariableInt16) right},
			 {typeof(Emilia.Variables.VariableInt32), (left, right) => (Emilia.Variables.VariableInt32) left < (Emilia.Variables.VariableInt32) right},
			 {typeof(Emilia.Variables.VariableInt64), (left, right) => (Emilia.Variables.VariableInt64) left < (Emilia.Variables.VariableInt64) right},
			 {typeof(Emilia.Variables.VariableSByte), (left, right) => (Emilia.Variables.VariableSByte) left < (Emilia.Variables.VariableSByte) right},
			 {typeof(Emilia.Variables.VariableSingle), (left, right) => (Emilia.Variables.VariableSingle) left < (Emilia.Variables.VariableSingle) right},
			 {typeof(Emilia.Variables.VariableUInt16), (left, right) => (Emilia.Variables.VariableUInt16) left < (Emilia.Variables.VariableUInt16) right},
			 {typeof(Emilia.Variables.VariableUInt32), (left, right) => (Emilia.Variables.VariableUInt32) left < (Emilia.Variables.VariableUInt32) right},
			 {typeof(Emilia.Variables.VariableUInt64), (left, right) => (Emilia.Variables.VariableUInt64) left < (Emilia.Variables.VariableUInt64) right},

        };

        private static Dictionary<Type, Func<Variable, Variable, Variable>> variableAdd = new Dictionary<Type, Func<Variable, Variable, Variable>>() {
			 {typeof(Emilia.Variables.VariableByte), (left, right) => (Emilia.Variables.VariableByte) left + (Emilia.Variables.VariableByte) right},
			 {typeof(Emilia.Variables.VariableChar), (left, right) => (Emilia.Variables.VariableChar) left + (Emilia.Variables.VariableChar) right},
			 {typeof(Emilia.Variables.VariableDecimal), (left, right) => (Emilia.Variables.VariableDecimal) left + (Emilia.Variables.VariableDecimal) right},
			 {typeof(Emilia.Variables.VariableDouble), (left, right) => (Emilia.Variables.VariableDouble) left + (Emilia.Variables.VariableDouble) right},
			 {typeof(Emilia.Variables.VariableInt16), (left, right) => (Emilia.Variables.VariableInt16) left + (Emilia.Variables.VariableInt16) right},
			 {typeof(Emilia.Variables.VariableInt32), (left, right) => (Emilia.Variables.VariableInt32) left + (Emilia.Variables.VariableInt32) right},
			 {typeof(Emilia.Variables.VariableInt64), (left, right) => (Emilia.Variables.VariableInt64) left + (Emilia.Variables.VariableInt64) right},
			 {typeof(Emilia.Variables.VariableSByte), (left, right) => (Emilia.Variables.VariableSByte) left + (Emilia.Variables.VariableSByte) right},
			 {typeof(Emilia.Variables.VariableSingle), (left, right) => (Emilia.Variables.VariableSingle) left + (Emilia.Variables.VariableSingle) right},
			 {typeof(Emilia.Variables.VariableUInt16), (left, right) => (Emilia.Variables.VariableUInt16) left + (Emilia.Variables.VariableUInt16) right},
			 {typeof(Emilia.Variables.VariableUInt32), (left, right) => (Emilia.Variables.VariableUInt32) left + (Emilia.Variables.VariableUInt32) right},
			 {typeof(Emilia.Variables.VariableUInt64), (left, right) => (Emilia.Variables.VariableUInt64) left + (Emilia.Variables.VariableUInt64) right},
			 {typeof(Emilia.Variables.VariableVector2), (left, right) => (Emilia.Variables.VariableVector2) left + (Emilia.Variables.VariableVector2) right},
			 {typeof(Emilia.Variables.VariableVector3), (left, right) => (Emilia.Variables.VariableVector3) left + (Emilia.Variables.VariableVector3) right},
			 {typeof(Emilia.Variables.VariableVector4), (left, right) => (Emilia.Variables.VariableVector4) left + (Emilia.Variables.VariableVector4) right},

        };

        private static Dictionary<Type, Func<Variable, Variable, Variable>> variableSubtract = new Dictionary<Type, Func<Variable, Variable, Variable>>() {
			 {typeof(Emilia.Variables.VariableByte), (left, right) => (Emilia.Variables.VariableByte) left - (Emilia.Variables.VariableByte) right},
			 {typeof(Emilia.Variables.VariableChar), (left, right) => (Emilia.Variables.VariableChar) left - (Emilia.Variables.VariableChar) right},
			 {typeof(Emilia.Variables.VariableDecimal), (left, right) => (Emilia.Variables.VariableDecimal) left - (Emilia.Variables.VariableDecimal) right},
			 {typeof(Emilia.Variables.VariableDouble), (left, right) => (Emilia.Variables.VariableDouble) left - (Emilia.Variables.VariableDouble) right},
			 {typeof(Emilia.Variables.VariableInt16), (left, right) => (Emilia.Variables.VariableInt16) left - (Emilia.Variables.VariableInt16) right},
			 {typeof(Emilia.Variables.VariableInt32), (left, right) => (Emilia.Variables.VariableInt32) left - (Emilia.Variables.VariableInt32) right},
			 {typeof(Emilia.Variables.VariableInt64), (left, right) => (Emilia.Variables.VariableInt64) left - (Emilia.Variables.VariableInt64) right},
			 {typeof(Emilia.Variables.VariableSByte), (left, right) => (Emilia.Variables.VariableSByte) left - (Emilia.Variables.VariableSByte) right},
			 {typeof(Emilia.Variables.VariableSingle), (left, right) => (Emilia.Variables.VariableSingle) left - (Emilia.Variables.VariableSingle) right},
			 {typeof(Emilia.Variables.VariableUInt16), (left, right) => (Emilia.Variables.VariableUInt16) left - (Emilia.Variables.VariableUInt16) right},
			 {typeof(Emilia.Variables.VariableUInt32), (left, right) => (Emilia.Variables.VariableUInt32) left - (Emilia.Variables.VariableUInt32) right},
			 {typeof(Emilia.Variables.VariableUInt64), (left, right) => (Emilia.Variables.VariableUInt64) left - (Emilia.Variables.VariableUInt64) right},
			 {typeof(Emilia.Variables.VariableVector2), (left, right) => (Emilia.Variables.VariableVector2) left - (Emilia.Variables.VariableVector2) right},
			 {typeof(Emilia.Variables.VariableVector3), (left, right) => (Emilia.Variables.VariableVector3) left - (Emilia.Variables.VariableVector3) right},
			 {typeof(Emilia.Variables.VariableVector4), (left, right) => (Emilia.Variables.VariableVector4) left - (Emilia.Variables.VariableVector4) right},

        };

        private static Dictionary<Type, Func<Variable, Variable, Variable>> variableMultiply = new Dictionary<Type, Func<Variable, Variable, Variable>>() {
			 {typeof(Emilia.Variables.VariableByte), (left, right) => (Emilia.Variables.VariableByte) left * (Emilia.Variables.VariableByte) right},
			 {typeof(Emilia.Variables.VariableChar), (left, right) => (Emilia.Variables.VariableChar) left * (Emilia.Variables.VariableChar) right},
			 {typeof(Emilia.Variables.VariableDecimal), (left, right) => (Emilia.Variables.VariableDecimal) left * (Emilia.Variables.VariableDecimal) right},
			 {typeof(Emilia.Variables.VariableDouble), (left, right) => (Emilia.Variables.VariableDouble) left * (Emilia.Variables.VariableDouble) right},
			 {typeof(Emilia.Variables.VariableInt16), (left, right) => (Emilia.Variables.VariableInt16) left * (Emilia.Variables.VariableInt16) right},
			 {typeof(Emilia.Variables.VariableInt32), (left, right) => (Emilia.Variables.VariableInt32) left * (Emilia.Variables.VariableInt32) right},
			 {typeof(Emilia.Variables.VariableInt64), (left, right) => (Emilia.Variables.VariableInt64) left * (Emilia.Variables.VariableInt64) right},
			 {typeof(Emilia.Variables.VariableQuaternion), (left, right) => (Emilia.Variables.VariableQuaternion) left * (Emilia.Variables.VariableQuaternion) right},
			 {typeof(Emilia.Variables.VariableSByte), (left, right) => (Emilia.Variables.VariableSByte) left * (Emilia.Variables.VariableSByte) right},
			 {typeof(Emilia.Variables.VariableSingle), (left, right) => (Emilia.Variables.VariableSingle) left * (Emilia.Variables.VariableSingle) right},
			 {typeof(Emilia.Variables.VariableUInt16), (left, right) => (Emilia.Variables.VariableUInt16) left * (Emilia.Variables.VariableUInt16) right},
			 {typeof(Emilia.Variables.VariableUInt32), (left, right) => (Emilia.Variables.VariableUInt32) left * (Emilia.Variables.VariableUInt32) right},
			 {typeof(Emilia.Variables.VariableUInt64), (left, right) => (Emilia.Variables.VariableUInt64) left * (Emilia.Variables.VariableUInt64) right},
			 {typeof(Emilia.Variables.VariableVector2), (left, right) => (Emilia.Variables.VariableVector2) left * (Emilia.Variables.VariableVector2) right},

        };

        private static Dictionary<Type, Func<Variable, Variable, Variable>> variableDivide = new Dictionary<Type, Func<Variable, Variable, Variable>>() {
			 {typeof(Emilia.Variables.VariableByte), (left, right) => (Emilia.Variables.VariableByte) left / (Emilia.Variables.VariableByte) right},
			 {typeof(Emilia.Variables.VariableChar), (left, right) => (Emilia.Variables.VariableChar) left / (Emilia.Variables.VariableChar) right},
			 {typeof(Emilia.Variables.VariableDecimal), (left, right) => (Emilia.Variables.VariableDecimal) left / (Emilia.Variables.VariableDecimal) right},
			 {typeof(Emilia.Variables.VariableDouble), (left, right) => (Emilia.Variables.VariableDouble) left / (Emilia.Variables.VariableDouble) right},
			 {typeof(Emilia.Variables.VariableInt16), (left, right) => (Emilia.Variables.VariableInt16) left / (Emilia.Variables.VariableInt16) right},
			 {typeof(Emilia.Variables.VariableInt32), (left, right) => (Emilia.Variables.VariableInt32) left / (Emilia.Variables.VariableInt32) right},
			 {typeof(Emilia.Variables.VariableInt64), (left, right) => (Emilia.Variables.VariableInt64) left / (Emilia.Variables.VariableInt64) right},
			 {typeof(Emilia.Variables.VariableSByte), (left, right) => (Emilia.Variables.VariableSByte) left / (Emilia.Variables.VariableSByte) right},
			 {typeof(Emilia.Variables.VariableSingle), (left, right) => (Emilia.Variables.VariableSingle) left / (Emilia.Variables.VariableSingle) right},
			 {typeof(Emilia.Variables.VariableUInt16), (left, right) => (Emilia.Variables.VariableUInt16) left / (Emilia.Variables.VariableUInt16) right},
			 {typeof(Emilia.Variables.VariableUInt32), (left, right) => (Emilia.Variables.VariableUInt32) left / (Emilia.Variables.VariableUInt32) right},
			 {typeof(Emilia.Variables.VariableUInt64), (left, right) => (Emilia.Variables.VariableUInt64) left / (Emilia.Variables.VariableUInt64) right},
			 {typeof(Emilia.Variables.VariableVector2), (left, right) => (Emilia.Variables.VariableVector2) left / (Emilia.Variables.VariableVector2) right},

        };
    }
}